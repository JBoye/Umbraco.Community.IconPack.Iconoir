import { readdir, readFileSync, writeFileSync, existsSync, mkdirSync } from 'fs';
import * as path from 'path';

// Directory where to look for SVGs
// This is the NPM package directory where the SVGs are stored
const svgDirectory = path.join('node_modules', 'iconoir', 'icons', 'regular');

const run = async () => {
    
	console.log(`Finding icons for icon pack in directory: '${svgDirectory}'`);

    // Construct the path to the JSON file
    const jsonFilePath = path.join('node_modules', 'iconoir', 'package.json');

    // Read the file and parse its contents
    const jsonData = JSON.parse(readFileSync(jsonFilePath, 'utf8'));
    const version = jsonData.version;
    console.log('Iconoir NPM Version', version);

    const buildTime = new Date().toISOString();

    // Read all .svgs in the directory
    const iconFiles = readdir(svgDirectory, (err, files) => {
        if (err) {
            console.error('Could not read directory', err);
            return;
        }

        const svgFiles = files.filter(file => path.extname(file) == ".svg");
        const svgFileCount = svgFiles.length;
        console.log(`Found ${svgFileCount} .svg files in directory`);

        if(svgFileCount === 0) {
            console.error('No .svg files found in directory');
            return;
        }

        GenerateSvgJsModules(svgFiles, buildTime, version);

        GenerateIconDictionary(svgFiles, buildTime, version);

        UpdateUmbracoPackageVersionWithNpmVersion(version);
    });    
};

function GenerateSvgJsModules(svgFileNames, buildTime, version) {

    console.log('Generating inline icon svgs in JS modules');

    // Ensure folder exists
    if (!existsSync('./public/Iconoir')){
        console.log('Creating directory: ./public/Iconoir');
        mkdirSync('./public/Iconoir', { recursive: true })
    }
    
    svgFileNames.forEach(svgFile => {
        // Open the file and read the content
        // svgDirectory + svgFile = full path to the file
        const filePath = path.join(svgDirectory, svgFile);
        let fileContent = readFileSync(filePath, 'utf8');

        // Remove width and height attributes from the SVG
        fileContent = fileContent.replace('width="24"', '');
        fileContent = fileContent.replace('height="24"', '');

        // Create a new .js module file with the svg content
        const baseName = path.basename(svgFile, '.svg');
        const jsFilePath = `./public/Iconoir/${baseName}.js`;
        const jsFileContent = `// This file is automatically generated by 'npm run build:iconpack'
// Generated at ${buildTime}
// Iconoir NPM Version: ${version}
export default \`${fileContent}\`;`;

        // Write the content to the .js file
        writeFileSync(jsFilePath, jsFileContent, (err) => {
            if (err) {
                console.error('Error writing file:', err);
            }
        });
    });
};

function GenerateIconDictionary(svgFileNames, buildTime, version){

    console.log('Generating icon dictionary .ts file');
    
    // Initialize an empty array for the icon dictionary
    const icons = [];

    // Iterate over the SVG file names
    svgFileNames.forEach(fileName => {
        // Remove the .svg extension from the file name
        const baseName = path.basename(fileName, '.svg');

        // Create an object for the icon
        const icon = {
            name: `iconoir-${baseName}`,
            path: `/App_Plugins/Umbraco.IconPack.Iconoir/Iconoir/${baseName}.js`,
        };

        // Add the icon object to the icon dictionary
        icons.push(icon);
    });

    // Convert the icons array into a string
    const iconArrayString = JSON.stringify(icons, null, 2);

    // Create the content for the icons.ts file
    const fileContent = `// This file is automatically generated by 'npm run build:iconpack'
// Generated at ${buildTime}
// Iconoir NPM Version: ${version}
import { UmbIconDictionary } from "@umbraco-cms/backoffice/icon";

const icons: UmbIconDictionary = ${iconArrayString};
export default icons;`;


    // Write the content to the icons.ts file
    writeFileSync('./src/IconPacks/icons.ts', fileContent, (err) => {
        if (err) {
            console.error('Error writing file:', err);
        }
    });
}

function UpdateUmbracoPackageVersionWithNpmVersion(version) {
    // Construct the path to the JSON file
    const jsonFilePath = path.join('public', 'umbraco-package.json');

    // Read the file and parse its contents
    const jsonData = JSON.parse(readFileSync(jsonFilePath, 'utf8'));

    // Update the version in the JSON object
    jsonData.version = version;

    // Save the JSON back down to a file
    writeFileSync(jsonFilePath, JSON.stringify(jsonData, null, 2), (err) => {
        if (err) {
            console.error('Error writing file:', err);
        }
    });
}

run();